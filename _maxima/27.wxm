/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 17.10.1 ] */
/* [wxMaxima: title   start ]
S26 - Potenzreihen
   [wxMaxima: title   end   ] */


/* [wxMaxima: section start ]
Exkurs: Angebotsrechnung
   [wxMaxima: section end   ] */


/* [wxMaxima: subsect start ]
Beispiel
   [wxMaxima: subsect end   ] */


/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Gegeben sei eine Firma, welche 2 Angebote stellt:
Angebot A:  6 Mio € sofort und dann 7 * 2 Mio € in Jahresabständen
Angebot B:  5 * 4 Mio € in Jahresabständen

Dazu kommt Kalkulationszinssatz von 5% p. Jahr

    1           2           3           4           5           6           7               Jahre
A   8           10.4        12.92       15.566      18.3443     21.261515   24.32459074     Millionen €
---------------------------------------------------------------------------------------->
B   0           4           12.61       17.2405     22.102525
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Angebot A ist für den Abnehmer besser geeignet, da dieser aufgrund der Zinsen insgesamt mehr Geld bezieht.
   [wxMaxima: comment end   ] */


/* [wxMaxima: section start ]
Hausübung
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Knr % 5 als Zeitpunkt zum durchrechnen
Knr = 14    -->     Knr % 5 = 4     -->     über 4 Jahre
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
angebotsrechnung(time, value, percent, current):=block(
    for i: 1 thru time do(
        current: current * (1 + percent * 0.01) + value,
        print("Jahr", i, "-", current)
    )
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Nach 4 Jahren
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
angebotsrechnung(4, 2, 5, 0);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: title   start ]
Potenzreihen
   [wxMaxima: title   end   ] */


/* [wxMaxima: section start ]
Definition
   [wxMaxima: section end   ] */


/* [wxMaxima: comment start ]
Summe an * x^n = a0 + a1 * x^1 + a2 * x^2 + ... + an * x^n von 0 bis unendlich
--> an = Koeffizienten der Potenzreihe

Wobei gilt:
Es gibt einen Konvergenzradius R, sodass die Reihe für |x| < R konvergiert.
--> R = lim(x->unendlich)|an/(an + 1)|

Wenn konvergent, können Potenzreihen gliedweise gerechnet werden.
   [wxMaxima: comment end   ] */


/* [wxMaxima: subsect start ]
Wozu Potenzreihen?
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
- Berechnung von Funktionswerten
- Näherungsformeln
- Integration
   [wxMaxima: comment end   ] */


/* [wxMaxima: subsect start ]
Idee
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Anstatt eine Funktion f(x) auszuwerten, entwickelt man eine Potenzreihe 
==> Es werden Zahlenwerte für die Koeffizienten berechnet.

z.B.: sin(x) = x - x^3/6 + x^5/120 - x^7/5040
   [wxMaxima: comment end   ] */


/* [wxMaxima: section start ]
Anwendung
   [wxMaxima: section end   ] */


/* [wxMaxima: comment start ]
Angenommen man wüsste die Entwicklung einer Potenzreihe f(x) als f(x) = a0 + a1*x + a2*x^2 + ... und nehme an die Zahlen wären bestimmt. Dann könne man anschreiben:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
f(x) = a_0 + a_1*x + a_2 * x^2;
f_x(x) = a_1 + 2*a_2*x + 3*a_3*x^2;
f_xx(x) = 2*a_2 + 5*a_3*x;
f_xxx(x) = 6*a_3;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Wobei gilt:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
f(0) = a_0;
f_x(0) = a_1;
f_xx(0)/2 = a_2;
f_xxx(0)/6 = a_3;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Daher auch:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
a_0 = f(0);
a_1 = f_x(0)/1;
a_2 = f_xx(0)/2;
a_3 = f_xxx(0)/6;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
f(0) ist bei vielen Funktionen bekannt, zum Beispiel:
sin(0) = 0
cos(0) = 1

Der Quotient bildet sich dabei aus der Fakultät (!) von n.
Die Fakultät ist das Produkt aller Zahlen von 1 bis n.

Bsp.:   3! = 1 * 2 * 3 = 6
        5! = 1 * 2 * 3 * 4 * 5 = 120
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Wir haben nun eine allgemein gültige Regel:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
f(0) = sum(a_i*x^i,i,0,inf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
f(0) = sum((f^(i)(0))/(i!) * x^i,i,0,inf);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Beispiel
   [wxMaxima: section end   ] */


/* [wxMaxima: comment start ]
Als Beispiel nehmen wir nun den sin(x).
Dabei achten wir zunächst auf die benötigten Ableitungen:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
f(x) = sin(x);
f_x(x) = cos(x);
f_xx(x) = -sin(x);
f_xxx(x) = -cos(x);
f_xxxx(x) = sin(x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Angewandt auf f(0), welches wir zur Berechnung benötigen kommen wir dabei auf folgende Werten:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
f(0) = 0;
f_x(0) = 1;
f_xx(0) = 0;
f_xxx(0) = -1;
f_xxxx(0) = 0;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Damit können wir nun die einzelnen Glieder der Potenzreihe berechnen:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
a_0 = f(0)/0!;
a_1 = f_x(0)/1!;
a_2 = f_xx(0)/2!;
a_3 = f_xxx(0)/3!;
a_4 = f_xxxx(0)/4!;
a_5 = f_xxxxx(0)/5!;
a_6 = f_xxxxxx(0)/6!;
a_7 = f_xxxxxxx(0)/7!;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Die oben berechneten Werte eingesetzt sieht man, dass nur jede ungerade Iteration einen Wert ungleich null hat, dadurch müssen nur noch diese bei der Berechnung beachtet werden.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Eine Kette von:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
sin(x) = a_0*x^0 + a_1*x^1 + a_2*x^2;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
wird nun zu:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
sin(x) = 1 - 1/6*x^3 + 1/120*x^5 - 1/5040*x^7;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Euler'sche Formel
   [wxMaxima: section end   ] */


/* [wxMaxima: comment start ]
Dieses vorgehen kann auch verwendet werden um auf eine Formel zu kommen, welche vor allem bei komplexen Zahlen zur Anwendung kommt:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
e^x = 1 + x + x^2/2! + x^3/3!;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Für x wird nun jy (eine komplexe Zahl) eingesetzt:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
e^jy = 1 + jy + (jy)^2/2! + (jy)^3/3!;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Diese Gleichung kann auf beide Variablen aufgelöst werden, wodurch man auf folgendes kommt:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
e^jy = 1 - y^2/2! + y^4/4! + j*(y - y^3/3! + y^5/5!);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Der erste Teil könnte nun als j*sin(y) und der zweite als cos(y) zusammengefasst werden. Dadurch entsteht die Euler'sche Formel:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
e^jy = cos(y) + j*sin(y);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Hausübung
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
- Sinus als Potenzreihe aufstellen
- sin(0.5) als Potenzreihe mit dem Ergebnis von Maxima vergleichen
    - Genauigkeit von 1-7 einsetzen
   [wxMaxima: comment end   ] */


/* [wxMaxima: subsect start ]
Sinus als Potenzreihe
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Der Sinus als Potenzreihe berechnet kann mit folgendem Ablauf bestimmt werden.
Zur weiteren Verwendung ist der Block so abstrakt gehalten, dass eine beliebige Funktion verwendet werden kann.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
potenzreihe(function, number, precision):=block(
    value: subst(0, x, function) / 1,
    for i: 1 thru precision do (
        value: float(value + subst(0, x, diff(function, x, i)^i/i!) * number^i)
    ),
    return(value)
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
potenzreihe(sin(x), 0.5, 10);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
sin(0.5)
   [wxMaxima: subsect end   ] */


/* [wxMaxima: input   start ] */
sinMaxima: sin(0.5);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sinPotenz: potenzreihe(sin(x), 0.5, 10);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxplot2d(sin(x), [x, 0, 10], [y, -1, 1]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
wxplot2d(x/1! - x^3/3! + x^5/5! - x^7/x! + x^9/9! - x^11/11!, [x, 0, 10]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Wie man sieht kommt wxMaxima rechnerisch auf ein nahezu identes Ergebnis, die Darstellung wird jedoch erst bei hoher Präzision genau.
   [wxMaxima: comment end   ] */


/* [wxMaxima: subsubsect start ]
Genauigkeit 1-7
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: input   start ] */
sinPotenz1: potenzreihe(sin(x), 0.5, 1);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sinPotenz3: potenzreihe(sin(x), 0.5, 3);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sinPotenz7: potenzreihe(sin(x), 0.5, 7);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Im Vergleich kommt man bereits bei wenigen Iterationen zu sehr genauen Ergebnissen.
Die ersten 3 Stellen stimmen bereits nach 3 durchläufen.
   [wxMaxima: comment end   ] */



/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
